---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-ecs-atlantis

# Logo for this project
logo: docs/logo.png

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-ecs-atlantis

# Screenshots
screenshots:
  - name: "demo"
    description: "Example of a Pull Request comment from running `terraform plan` using `atlantis`"
    url: "docs/example.png"

# Badges to display
badges:
  - name: "Build Status"
    image: "https://travis-ci.org/cloudposse/terraform-aws-ecs-atlantis.svg?branch=master"
    url: "https://travis-ci.org/cloudposse/terraform-aws-ecs-atlantis"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-aws-ecs-atlantis.svg"
    url: "https://github.com/cloudposse/terraform-aws-ecs-atlantis/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

related:
  - name: "terraform-aws-ecs-web-app"
    description: "Terraform module that implements a web app on ECS and supports autoscaling, CI/CD, monitoring, ALB integration, and much more"
    url: "https://github.com/cloudposse/terraform-aws-ecs-web-app"
  - name: "terraform-aws-alb"
    description: "Terraform module to provision a standard ALB for HTTP/HTTP traffic"
    url: "https://github.com/cloudposse/terraform-aws-alb"
  - name: "terraform-aws-alb-ingress"
    description: "Terraform module to provision an HTTP style ingress rule based on hostname and path for an ALB"
    url: "https://github.com/cloudposse/terraform-aws-alb-ingress"
  - name: "terraform-aws-codebuild"
    description: "Terraform Module to easily leverage AWS CodeBuild for Continuous Integration"
    url: "https://github.com/cloudposse/terraform-aws-codebuild"
  - name: "terraform-aws-ecr"
    description: "Terraform Module to manage Docker Container Registries on AWS ECR"
    url: "https://github.com/cloudposse/terraform-aws-ecr"
  - name: "terraform-aws-ecs-alb-service-task"
    description: "Terraform module which implements an ECS service which exposes a web service via ALB."
    url: "https://github.com/cloudposse/terraform-aws-ecs-alb-service-task"
  - name: "terraform-aws-ecs-codepipeline"
    description: "Terraform Module for CI/CD with AWS Code Pipeline and Code Build for ECS"
    url: "https://github.com/cloudposse/terraform-aws-ecs-codepipeline"
  - name: "terraform-aws-ecs-container-definition"
    description: "Terraform module to generate well-formed JSON documents that are passed to the aws_ecs_task_definition Terraform resource"
    url: "https://github.com/cloudposse/terraform-aws-ecs-container-definition"
  - name: "terraform-aws-lb-s3-bucket"
    description: "Terraform module to provision an S3 bucket with built in IAM policy to allow AWS Load Balancers to ship access logs."
    url: "https://github.com/cloudposse/terraform-aws-lb-s3-bucket"


# Short description of this project
description: |-

  A Terraform module for deploying [Atlantis](https://runatlantis.io) to an AWS ECS cluster.

introduction: |-

  Atlantis enables GitOps workflows so that teams can collaborate on operations using Pull Requests.

  Under the hood, it's a small self-hosted daemon (`#golang`) that listens for Pull Request webhook events from GitHub.

  With Atlantis, engineers can run `terraform plan` and `terraform apply` using "chat ops" type comments on the Pull Request.

  ### Features

  This module provisions the following resources:

  - ECS Atlantis web application, which includes:
      - ECR Docker registry
      - ALB target group, listener rule and alarms
      - ECS container definition (using a default backend)
      - ECS task definition and IAM role
      - ECS service and IAM role
      - ECS task autoscaling
      - ECS SNS based alarms
      - ECS Codepipeline to build our Atlantis image on GitHub release
      - ECS Codedeploy to deploy our ECS Atlantis web app
  - SSH key pair for Atlantis to pull private Github repositories, which are written to SSM for reading with [chamber](https://github.com/segmentio/chamber)
  - Route53 alias for Atlantis
  - GitHub webhook to trigger Atlantis for a given repository

  What this module does not provision:

    - ECS Cluster (BYOC)
    - ALB
    - ACM certificate
    - VPC
    - Subnets

  ## Caveats

  - This project assumes that the repo being deployed defines a `Dockerfile` which runs `atlantis`. It might not work with the official version of atlantis. We use [`geodesic`](https://github.com/cloudposse/geodesic) as our docker base image.
  - This project defines parameters which are not available in the *official version* of `atlantis`. Our [fork](https://github.com/cloudposse/atlantis) implements the ability to restrict `plan` and `apply` to GitHub teams.


  ### GitHub Repo Scopes

  This module accepts two GitHub OAuth tokens:

  1. `github_oauth_token` with permissions to pull private repos. Used by CodePipeline to clone repos before the build, and by the atlantis server to clone repos and comment on Pull Requests.

      The token needs the following OAuth scopes:

      - `repo`
        * `repo:status`
        * `repo_deployment`
        * `public_repo`
        * `repo:invite`

  2. `github_webhooks_token` with permissions to create GitHub webhooks.
      Only used by [Terraform GitHub Provider](https://www.terraform.io/docs/providers/github/index.html) when provisioning the module.

      The token needs the following OAuth scopes:

        - `admin:repo_hook`
          * `write:repo_hook`
          * `read:repo_hook`

  We suggest the following steps when creating the tokens and provisioning the module:

  1. Create a GitHub bot user
  2. Create the two Personal Access Tokens and add them to the bot
  3. In `github.com/<org>/<repo>/settings/collaboration`, create a Team for the bot and add the bot user to it
  4. Give `Admin` permissions to the Team (select it from the dropdown). We need it temporalily to provision GitHub webhooks on the repo
  5. Provision the module with Terraform.
    [Terraform GitHub Provider](https://www.terraform.io/docs/providers/github/index.html) will use the `github_webhooks_token` to create webhooks on the repo
  6. Go to `github.com/<org>/<repo>/settings/hooks` and make sure that two webhooks have been created: one for the CodePipeline with `Releases` events,
    the other is for the `atlantis` server with `Issue comments`, `Pull request reviews`, `Pull requests`, `Pull request review comments` and `Pushes` events
  7. **IMPORTANT:** Remove the `Admin` permissions and add `Read` permissions for the bot Team.
    The CodePipeline and `atlantis` server will use the `github_oauth_token` to clone repos, which does not require escalated privileges

  **IMPORTANT:** Do not commit the tokens to source control (_e.g._ via `terraform.tvfars`).

  **NOTE:** If the two tokens are not provided (left empty), they will be looked up from SSM Parameter Store.
  You can write `atlantis atlantis_gh` and `github_webhooks_token` to SSM Parameter Store before provisioning the module.
  For example, by using [chamber](https://github.com/segmentio/chamber):

  ```sh
    chamber write atlantis atlantis_gh_token "....."
    chamber write atlantis github_webhooks_token "....."
  ```

# How to use this project
usage: |-

  Module usage examples:

  - [without authentication](examples/without_authentication) - complete example without authentication
  - [with Google OIDC authentication](examples/with_google_oidc_authentication) - complete example with Google OIDC authentication
  - [with Cognito authentication](examples/with_cognito_authentication) - complete example with Cognito authentication


  **NOTE:**

    If no `github_oauth_token` is set, the module attempts to look one up from SSM.

    If no `github_webhooks_token` is set, [Terraform GitHub Provider](https://www.terraform.io/docs/providers/github/index.html) attempts to look one up in the `GITHUB_TOKEN` environment variable.

  ```
  module "atlantis" {
    source    = "git::https://github.com/cloudposse/terraform-aws-ecs-atlantis.git?ref=master"
    enabled   = "true"
    name      = "${var.name}"
    namespace = "${var.namespace}"
    region    = "${var.region}"
    stage     = "${var.stage}"

    atlantis_gh_team_whitelist = "admins:*,engineering:plan"
    atlantis_gh_user           = "atlantis_bot"
    atlantis_repo_whitelist    = ["github.com/testing.example.co/*"]

    alb_arn_suffix    = "${module.alb.alb_arn_suffix}"
    alb_dns_name      = "${module.alb.alb_dns_name}"
    alb_name          = "${module.alb.alb_name}"
    alb_zone_id       = "${module.alb.alb_zone_id}"

    domain_name        = "${var.domain_name}"
    ecs_cluster_arn    = "${aws_ecs_cluster.default.arn}"
    ecs_cluster_name   = "${aws_ecs_cluster.default.name}"
    repo_name          = "testing.example.co"
    repo_owner         = "example_org"
    private_subnet_ids = ["${module.subnets.private_subnet_ids}"]
    security_group_ids = ["${module.vpc.vpc_default_security_group_id}"]
    vpc_id             = "${module.vpc.vpc_id}"

    alb_ingress_unauthenticated_listener_arns       = ["${module.alb.listener_arns}"]
    alb_ingress_unauthenticated_listener_arns_count = 2
    alb_ingress_unauthenticated_paths               = ["/*"]
    alb_ingress_listener_unauthenticated_priority   = "100"
    alb_ingress_authenticated_paths                 = []
  }
  ```

# Example usage
#examples: |-
#  Example goes here...

# How to get started quickly
#quickstart: |-
#  Here's how to get started...

# Other files to include in this README from the project folder
include:
  - "docs/targets.md"
  - "docs/terraform.md"

references:
  - name: "atlantis"
    description: "Official home of the Atlantis project"
    url: "https://runatlantis.io"

# Contributors to this project
contributors:
  - name: "Josh Myers"
    github: "joshmyers"
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Andriy Knysh"
    github: "aknysh"
  - name: "Igor Rodionov"
    github: "goruha"
