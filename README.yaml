---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-ecs-atlantis

# Logo for this project
logo: docs/logo.png

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-ecs-atlantis

# Screenshots
screenshots:
  - name: "demo"
    description: "Example of a Pull Request comment from running `terraform plan` using `atlantis`"
    url: "docs/example.png"

# Badges to display
badges:
  - name: "Build Status"
    image: "https://travis-ci.org/cloudposse/terraform-aws-ecs-atlantis.svg?branch=master"
    url: "https://travis-ci.org/cloudposse/terraform-aws-ecs-atlantis"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-aws-ecs-atlantis.svg"
    url: "https://github.com/cloudposse/terraform-aws-ecs-atlantis/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

related:
  - name: "terraform-aws-ecs-webapp"
    description: "Terraform module that implements a web app on ECS and supports autoscaling, CI/CD, monitoring, ALB integration, and much more"
    url: "https://github.com/cloudposse/terraform-aws-ecs-web-app"
  - name: "terraform-aws-ecs-web-app"
    description: "Terraform module to provision a standard ALB for HTTP/HTTP traffic"
    url: "https://github.com/cloudposse/terraform-aws-alb"
  - name: "terraform-aws-alb-ingress"
    description: "Terraform module to provision an HTTP style ingress rule based on hostname and path for an ALB"
    url: "https://github.com/cloudposse/terraform-aws-alb-ingress"
  - name: "terraform-aws-codebuild"
    description: "Terraform Module to easily leverage AWS CodeBuild for Continuous Integration"
    url: "https://github.com/cloudposse/terraform-aws-codebuild"
  - name: "terraform-aws-ecr"
    description: "Terraform Module to manage Docker Container Registries on AWS ECR"
    url: "https://github.com/cloudposse/terraform-aws-ecr"
  - name: "terraform-aws-ecs-alb-service-task"
    description: "Terraform module which implements an ECS service which exposes a web service via ALB."
    url: "https://github.com/cloudposse/terraform-aws-ecs-alb-service-task"
  - name: "terraform-aws-ecs-codepipeline"
    description: "Terraform Module for CI/CD with AWS Code Pipeline and Code Build for ECS"
    url: "https://github.com/cloudposse/terraform-aws-ecs-codepipeline"
  - name: "terraform-aws-ecs-container-definition"
    description: "Terraform module to generate well-formed JSON documents that are passed to the aws_ecs_task_definition Terraform resource"
    url: "https://github.com/cloudposse/terraform-aws-ecs-container-definition"
  - name: "terraform-aws-lb-s3-bucket"
    description: "Terraform module to provision an S3 bucket with built in IAM policy to allow AWS Load Balancers to ship access logs."
    url: "https://github.com/cloudposse/terraform-aws-lb-s3-bucket"




# Short description of this project
description: |-

  A Terraform module for deploying [Atlantis](https://runatlantis.io) to an AWS ECS cluster.

introduction: |-

  Atlantis enables GitOps workflows so that teams can collaborate on operations using Pull Requests. 
  
  Under the hood, it's a small self-hosted daemon (`#golang`) that listens for Pull Request webhook events from GitHub.

  With Atlantis, engineers can run `terraform plan` and `terraform apply` using "chat ops" type comments on the Pull Request.

  ### Features

  This module provisions the following resources:

  - ECS Atlantis web application, which includes:
      - ECR Docker registry
      - ALB target group, listener rule and alarms
      - ECS container definition (using a default backend)
      - ECS task definition and IAM role
      - ECS service and IAM role
      - ECS task autoscaling
      - ECS SNS based alarms
      - ECS Codepipeline to build our Atlantis image on GitHub release
      - ECS Codedeploy to deploy our ECS Atlantis web app
  - SSH key pair for Atlantis to pull private Github repositories, which are written to SSM for reading with [chamber](https://github.com/segmentio/chamber)
  - Route53 alias for Atlantis
  - GitHub webhook to trigger Atlantis for a given repository

  What this module does not provision:
    
    - ECS Cluster (BYOC)
    - ALB
    - ACM certificate
    - VPC
    - Subnets
    
  ## Caveats

  - This project assumes that the repo being deployed defines a `Dockerfile` which runs `atlantis`. It might not work with the official version of atlantis. We use [`geodesic`](https://github.com/cloudposse/geodesic) as our docker base image.
  - This project defines parameters which are not available in the *official version* of `atlantis`. Our [fork](https://github.com/cloudposse/atlantis) implements the ability to restrict `plan` and `apply` to GitHub teams.

  
  ### GitHub Repo Scopes

  We suggest creating a personal access token for a GitHub bot user with the following scopes:

    - `repo`
      * `repo:status`
      * `repo_deployment`
      * `public_repo`
      * `repo:invite`
    - `admin:repo_hook`
      * `write:repo_hook`
      * `read:repo_hook`

  ![GitHub Repo Scopes](docs/github-repo-scopes.png)

  **IMPORTANT:** Do not commit this `github_oauth_token` to source control (e.g. via `terraform.tvfars`). 

# How to use this project
usage: |-

  **NOTE:** if no `github_oauth_token` is set, this module attempts to look one up from SSM. 
  
  ```
  module "atlantis" {
    source = "git::https://github.com/cloudposse/terraform-aws-ecs-atlantis.git?ref=master"
    enabled   = "true"
    name      = "${var.name}"
    namespace = "${var.namespace}"
    region    = "${var.region}"
    stage     = "${var.stage}"

    atlantis_gh_team_whitelist = "admins:*,engineering:plan"
    atlantis_gh_user           = "atlantis_bot"
    atlantis_repo_whitelist    = ["github.com/testing.example.co/*"]

    alb_arn_suffix    = "${module.alb.alb_arn_suffix}"
    alb_dns_name      = "${module.alb.alb_dns_name}"
    alb_listener_arns = ["${module.alb.listener_arns}"]
    alb_name          = "${module.alb.alb_name}"
    alb_zone_id       = "${module.alb.alb_zone_id}"

    domain_name        = "${var.domain_name}"
    ecs_cluster_arn    = "${aws_ecs_cluster.default.arn}"
    ecs_cluster_name   = "${aws_ecs_cluster.default.name}"
    repo_name          = "testing.example.co"
    repo_owner         = "example_org"
    private_subnet_ids = ["${module.subnets.private_subnet_ids}"]
    security_group_ids = ["${module.vpc.vpc_default_security_group_id}"]
    vpc_id             = "${module.vpc.vpc_id}"
  }
  ```

# Example usage
#examples: |-
#  Example goes here...

# How to get started quickly
#quickstart: |-
#  Here's how to get started...

# Other files to include in this README from the project folder
include:
  - "docs/targets.md"
  - "docs/terraform.md"

references:
  - name: "atlantis"
    description: "Official home of the Atlantis project"
    url: "https://runatlantis.io"

related:
  - name: "terraform-aws-ecs-web-app"
    description: "Terraform module that implements a web app on ECS and supporting AWS resources"
    url: "https://github.com/cloudposse/terraform-aws-ecs-web-app"
  - name: "terraform-aws-alb"
    description: "Terraform module to provision a standard ALB for HTTP/HTTP traffic"
    url: "https://github.com/cloudposse/terraform-aws-alb"
  - name: "terraform-aws-alb-ingress"
    description: "Terraform module to provision an HTTP style ingress rule based on hostname and path for an ALB"
    url: "https://github.com/cloudposse/terraform-aws-alb-ingress"
  - name: "terraform-aws-codebuild"
    description: "Terraform Module to easily leverage AWS CodeBuild for Continuous Integration"
    url: "https://github.com/cloudposse/terraform-aws-codebuild"
  - name: "terraform-aws-ecr"
    description: "Terraform Module to manage Docker Container Registries on AWS ECR"
    url: "https://github.com/cloudposse/terraform-aws-ecr"
  - name: "terraform-aws-ecs-alb-service-task"
    description: "Terraform module which implements an ECS service which exposes a web service via ALB."
    url: "https://github.com/cloudposse/terraform-aws-ecs-alb-service-task"
  - name: "terraform-aws-ecs-codepipeline"
    description: "Terraform Module for CI/CD with AWS Code Pipeline and Code Build for ECS"
    url: "https://github.com/cloudposse/terraform-aws-ecs-codepipeline"
  - name: "terraform-aws-ecs-container-definition"
    description: "Terraform module to generate well-formed JSON documents that are passed to the aws_ecs_task_definition Terraform resource"
    url: "https://github.com/cloudposse/terraform-aws-ecs-container-definition"
  - name: "terraform-aws-lb-s3-bucket"
    description: "Terraform module to provision an S3 bucket with built in IAM policy to allow AWS Load Balancers to ship access logs."
    url: "https://github.com/cloudposse/terraform-aws-lb-s3-bucket"




# Contributors to this project
contributors:
  - name: "Josh Myers"
    github: "joshmyers"
